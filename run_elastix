#!/bin/bash

__version__="1.1.0"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# For compatibility with systems where realpath is not installed, e.g. MacOS.
if ! which realpath &> /dev/null; then
    realpath() {
        path="$1"
        # First, if the file is a symlink, recursively resolve it
        while [ -L "$path" ]; do
            link_path=$(readlink $path)
            case ${link_path:0:1} in
                "/") path="$link_path" ;;
                "~") path="$link_path" ;;
                *) path="$(dirname "$path")/$link_path"
            esac
        done
        # Then resolve folder symlinks and ".." and other junk in the full path
        echo "$(cd "$(dirname "$path")" && pwd -P)/$(basename "$1")"
    }
fi

# Load run_elastix settings
source run_elastix_settings

# Configure elastix path
if which elastix > /dev/null; then
    elastix_path=$(which elastix)
    echo "Using elastix found on the PATH: $elastix_path"
else
    elastix_path=$(ls $elastix_installation_location/elastix*/bin/elastix)
    n_elastix_found=$(ls $elastix_installation_location/elastix*/bin/elastix | wc -l)
    if [ "$n_elastix_found" -eq 0 ]; then
        >&2 echo "elastix could not be found at $elastix_installation_location/elastix*/bin/elastix"
        >&2 echo "Make sure you have downloaded elastix and then edited ${SCRIPT_DIR}/run_elastix_settings to specify where you put the elastix files"
        >&2 echo "See README.md for more details"
        exit 1
    elif [ "$n_elastix_found" -gt 1 ]; then
        >&2 echo "$n_elastix_found elastix executables found in $elastix_installation_location:"
        >&2 echo $elastix_path
        elastix_path=$(ls -t $elastix_installation_location/elastix*/bin/elastix | head -n 1)
        >&2 echo "Using the version with the most recent timestamp: $elastix_path"
    else
        >&2 echo "Using elastix found at: $elastix_path"
    fi
    # Add the folder containing elastix to the path
    export PATH=$(dirname "$elastix_path"):$PATH
fi
>&2 echo ""

# Due to MacOS System Integrity Protection purging LD_* environment variables,
# we set it explicitly here so that elastix can find is library file
# (libANNlib-X.Y.so). Doing this also makes sure elastix will work on other
# OSes even if the user hasn't set their LD_LIBRARY_PATH to point to the
# folder containing elastix's lib folder
elastix_path=$(realpath $elastix_path)
# Allow elastix to search for libANNlib-5.0 in the elastix folder and in ../lib
export LD_LIBRARY_PATH=$(dirname "$elastix_path"):$(dirname "$(dirname "$elastix_path")")/lib

if [ "$1" == "--version" ]; then
    echo "run_elastix version: $__version__"
    elastix --version
    exit 1
fi

show_help () {
    >&2 echo "A command line utility for running elastix to register two 3D image volumes"
    >&2 echo "Version: $__version__"
    >&2 echo ""
    >&2 echo "Command line arguments:"
    >&2 echo "run_elastix image_to_align.nrrd [-m mask] [-t target] [-tm target_mask]"
    >&2 echo "                                [-p points] [-tp target_points]"
    >&2 echo "                                [-s spacing(s)] [-w bending_weight(s)]"
    >&2 echo "                                [-r] [-a] [-ap affine_parameters_file] [-at0 affine_initial_transform]"
    >&2 echo "                                [-b] [-bp bspline_parameters_file] [-bt0 bspline_initial_transform]"
    >&2 echo "                                [-o output_suffix] [--threads num_threads]"
    >&2 echo "                                [-v] [-f] [-x] [-y] [-n]"
    >&2 echo ""
    >&2 echo "  -m mask              Path to mask file specifying which part of the image to consider. Default no mask."
    >&2 echo "  -t target            Path to target image volume to align to. Default $target (specified in run_elastix_settings)."
    >&2 echo "  -tm mask             Path to mask file specifying which part of the target image to consider. Default no mask."
    >&2 echo ""
    >&2 echo "  -p                   Path to text file containing a list of points in the image. Must be used with -tp."
    >&2 echo "  -tp                  Path to text file containing a list of points in the target corresponding to the points provided with -p."
    >&2 echo "                         These pairs of corresponding points will be pulled together during alignment."
    >&2 echo ""
    >&2 echo "  -s spacing(s)        Run Bspline alignment with GridSpacingInPhysicalUnits set to this. Default 12."
    >&2 echo "                         This value absolutely must be tuned based on the physical size of your image! The default of 12 would likely"
    >&2 echo "                           be too small for a 1000x1000x1000 units (e.g. microns) image, but too large for a 40x40x40 units image."
    >&2 echo "                           Your image and target must have a pixel size set in the metadata for this value to be intepreted correctly."
    >&2 echo "                         Smaller values allow for finer distortions to be modeled, at the cost of increased runtime."
    >&2 echo "                         This argument can be a space-separated list contained in \"\", in which case multiple"
    >&2 echo "                           alignments will be run, one for each given spacing. (e.g. -s \"6 12 24\")"
    >&2 echo "                         The elements of the list will usually be single numbers, but some/all can be dash-separated"
    >&2 echo "                           triplets to specify different spacings in x y and z. (e.g. -s \"6-6-8 12-12-8\")"
    >&2 echo "                         For Drosophila nervous system template alignment, using -s 4 often gives good results (but runs slowly!)"
    >&2 echo "  -w bending_weight(s) Run Bspline alignment with Metric1Weight set to this. Default 100."
    >&2 echo "                         Smaller values allow for more bending, which can produce better alignments but also can lead to over-warping."
    >&2 echo "                         This argument can be a list contained in \"\", in which case alignment will be run for each given weight."
    >&2 echo "                         This value must be tuned for your specific -s argument and depends on how much contrast is in your image."
    >&2 echo "                         For Drosophila nervous system template alignment, using -w 20 with -s 4 often gives good results."
    >&2 echo ""
    >&2 echo "  -r                   (Reverse) Instead of aligning the image to the target, align the target to the image."
    >&2 echo "  -a                   (Affine) Only run affine alignment, skipping Bspline alignment. -s and -w are ignored."
    >&2 echo "  -ap parameters_file  Use the given elastix parameter file to run the affine alignment. Default ${SCRIPT_DIR}/elastixParams_affine.txt."
    >&2 echo "  -at0 transform_file  Initialize the affine alignment by first applying the given transformation file."
    >&2 echo "  -b                   (Bspline) Only run Bspline alignment. Affine must have previously been run, or you must provide a -bt0."
    >&2 echo "  -bp parameters_file  Use the given elastix parameter file to run the Bspline alignment. Default ${SCRIPT_DIR}/elastixParams_Bspline.txt."
    >&2 echo "  -bt0 transform_file  Initialize the Bspline alignment(s) by first applying the given transformation file."
    >&2 echo ""
    >&2 echo "  -o output_suffix     Append suffix to output folder name. Default is no suffix. Use if you're testing some settings."
    >&2 echo "  --threads n_threads  Allow elastix to use this many parallel threads. Default $number_of_threads_to_use (specified in run_elastix_settings)."
    >&2 echo "  -v                   (Verbose) Increase output detail. (Currently doesn't do anything - typical output is detailed already.)"
    >&2 echo "  -f                   (Fake) Don't run any alignments, instead print what commands would be run."
    >&2 echo "  -x                   (X) Do not generate a final image, instead only generate the transformation file."
    >&2 echo "  -y                   (Yes) Say yes to all prompts (e.g. overwriting existing files)."
    >&2 echo "  -n                   (No) Say no to all prompts (e.g. skip if any files would be overwritten)."
    >&2 echo ""
    >&2 echo "See $SCRIPT_DIR/README.md for more detailed instructions, advice, and example commands."
    >&2 echo "View that file on GitHub for nice formatting, or type 'run_elastix manual' to open it in your terminal."
    >&2 echo ""
}

if [ "$#" -eq 0 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    show_help
    exit 1
fi

if [ "$1" == "manual" ]; then
    less "$SCRIPT_DIR/README.md"
    exit 1
fi


# Check whether the GNU sed or BSD/MacOS sed is installed and use
# the form of the -i argument required by the detected version
# Information from https://stackoverflow.com/a/44864004
# Implementation from https://stackoverflow.com/a/9323261
if sed --version &> /dev/null; then
    dashi=(-i)  # GNU sed
else
    dashi=(-i "")  # BSD/MacOS sed
fi



#DEFAULTS FOR ARGUMENT-MODIFIABLE VARIABLES GO HERE
verbose=false
fake=false
mask=""
target_mask=""
points=""
target_points=""
spacings="12"
bending_weights="100"
output_suffix=""
n_threads=$number_of_threads_to_use
affine_initial_transform=""
affine_runparams="${SCRIPT_DIR}/elastixParams_affine.txt"
bspline_initial_transform=""
bspline_runparams="${SCRIPT_DIR}/elastixParams_Bspline.txt"

moving_target=false
run_affine=true
run_Bspline=true
suppress_image_writing=false
say_yes=false
say_no=false

positionalArgs=()
unknownOptions=()
while [ "$#" -gt 0 ]; do
    case "$1" in
        -m)
            mask="$2"
            shift; shift
        ;;
        -t)
            target="$2"
            shift; shift
        ;;
        -tm)
            target_mask="$2"
            shift; shift
        ;;
        -p)
            points="$2"
            shift; shift
        ;;
        -tp)
            target_points="$2"
            shift; shift
        ;;
        -s)
            spacings="$2"
            shift; shift
        ;;
        -w)
            bending_weights="$2"
            shift; shift
        ;;
        -o)
            output_suffix="$2"
            shift; shift
        ;;
        --threads)
            n_threads="$2"
            shift; shift
        ;;
        -v)
            verbose=true
            >&2 echo "Running verbose"
            shift
        ;;
        -f)
            fake=true
            >&2 echo "fake=true"
            shift
        ;;
        -r)
            moving_target=true
            shift
        ;;
        -a)
            run_affine=true
            run_Bspline=false
            shift
        ;;
        -ap)
            if [ -f "$2" ]; then
                affine_runparams="$2"
            elif [ -f "${SCRIPT_DIR}/$2" ]; then
                affine_runparams="${SCRIPT_DIR}/$2"
            else
                show_help
                >&2 echo "The -ap argument does not point to an existing file: $2"
                exit 1
            fi
            shift; shift
        ;;
        -at0)
            if [ ! -f "$2" ]; then
                show_help
                >&2 echo "The -at0 argument does not point to an existing file: $2"
                exit 1
            fi
            affine_initial_transform="-t0 $(realpath $2)"
            shift; shift
        ;;
        -b)
            run_affine=false
            run_Bspline=true
            shift
        ;;
        -bp)
            if [ -f "$2" ]; then
                bspline_runparams="$2"
            elif [ -f "${SCRIPT_DIR}/$2" ]; then
                bspline_runparams="${SCRIPT_DIR}/$2"
            else
                show_help
                >&2 echo "The -bp argument does not point to an existing file: $2"
                exit 1
            fi
            shift; shift
        ;;
        -bt0)
            if [ ! -f "$2" ]; then
                show_help
                >&2 echo "The -bt0 argument does not point to an existing file: $2"
                exit 1
            fi
            bspline_initial_transform="$(realpath $2)"
            shift; shift
        ;;
        -x)
            suppress_image_writing=true
            shift
        ;;
        -y)
            say_yes=true
            shift
        ;;
        -n)
            say_no=true
            shift
        ;;
        #-e|--exampleLongOption)
        #    thisOption=true
        #    shift
        #;;
        #-n|--number) #For flags that take a separate argument (like "-n 8" or any other "-[letter] [argument]"), use this template
        #    number="$2"
        #    shift; shift
        #;;
        *)
            if [ " ${1:0:1}" == " -" ]; then #Ignore arguments starting with - that aren't explicitly listed above
                if [ "$#" -eq 1 ]; then
                    show_help
                    >&2 echo "ERROR: The only parameter is an unknown option. Aborting."
                    exit 1
                fi
                unknownOptions+=("$1")
                >&2 echo "WARNING: Unknown option $1, ignoring"
            else
                positionalArgs+=("$1") #Store arguments (other than ones recognized above) in order
            fi
            shift
        ;;
    esac
done
set -- "${positionalArgs[@]}"
if [ "$#" -ne 1 ]; then
    >&2 echo "Provide exactly 1 positional argument. $# were provided:"
    echo $@
    show_help
    exit 1
fi
#echo $@

#ARGUMENT VALIDATION
if [ ! -f "$target" ]; then
    if [ -f "${SCRIPT_DIR}/$target" ]; then
        target="${SCRIPT_DIR}/$target"
    else
        show_help
        >&2 echo "The filename provided for the target image was \"$target\" but that file does not exist."
        >&2 echo "Specify the target's filename using the \"-t\" argument, or put it into ${SCRIPT_DIR}/run_elastix_settings"
        exit 1
    fi
fi
if [ ! -f "$1" ]; then
    show_help
    echo "A file with the given filename does not exist: $1"
    exit 1
fi
if [ ! -z "${1/*.nrrd/}" ]; then
    show_help
    echo "The given file does not end in .nrrd: $1"
    echo "Please convert to nrrd and try again." #Elastix probably works with other image formats, but I haven't tested it.
    #If you want to run with a non-.nrrd file, just remove the 'exit 1' below and this script will try running elastix on it.
    exit 1
fi

if $say_yes && $say_no; then
    show_help
    >&2 echo ""
    >&2 echo "ERROR: Cannot use both -y and -n flags at the same time."
    exit 1
fi

#FAKEABLE COMMANDS GO HERE.
#For the commands listed here, you can use "$command" instead of "command" anywhere in your code that you want the command to echo instead of execute when running in fake mode. For instance, write the line "$mv file1 file2" instead of "mv file1 file2" if you want that line's mv command to not execute when the -f flag is given. If you write "mv file1 file2", then your mv command will happen normally regardless of if -f is given.
fakeableCommands="rm mv cp ln chmod mkdir realpath sed exit return elastix transformix"
if $fake; then
    for cmd in $fakeableCommands; do
        eval $cmd=\"echo \$cmd\"
    done
else
    for cmd in $fakeableCommands; do
        eval $cmd=\"\$cmd\"
    done
fi


#CODE GOES HERE
image_to_align="$1"
mask_argument=""
target_mask_argument=""
points_argument=""
if $moving_target; then
    fixed=$image_to_align
    moving=$target
    output="${1/.nrrd/}_elastix_with_moving_target"
    if [ -n "$mask" ]; then
        mask_argument="-fMask $mask"
    fi
    if [ -n "$target_mask" ]; then
        target_mask_argument="-mMask $target_mask"
    fi
    if [ -n "$points" -a -n "$target_points" ]; then
        points_argument="-fp $points -mp $target_points"
    fi
else
    fixed=$target
    moving=$image_to_align
    output="${1/.nrrd/}_elastix"
    if [ -n "$mask" ]; then
        mask_argument="-mMask $mask"
    fi
    if [ -n "$target_mask" ]; then
        target_mask_argument="-fMask $target_mask"
    fi
    if [ -n "$points" -a -n "$target_points" ]; then
        points_argument="-fp $target_points -mp $points"
    fi
fi

if [ -n "$output_suffix" ]; then
    output_suffix=_$output_suffix #Put a _ in just before the suffix
fi


func_run_affine() {
    if [ ! -f "$affine_runparams" ]; then
        show_help
        >&2 echo "ERROR: elastix parameter file does not exist at $affine_runparams"
        return 1
    fi

    mkdir -p "$output/affine"

    if grep TODO "$affine_runparams" && ! "$say_yes"; then
        if "$say_no"; then
            >&2 echo "WARNING: There's a TODO in the parameter file. Skipping."
            return 1
        fi
        if ! "$say_yes"; then
            >&2 read -p "WARNING: There's a TODO in the parameter file. Are you sure you want to continue? (y/n) " input
            case $input in [yY]) echo "Continuing" ;; *) echo "Exiting"; return 1 ;; esac
        fi
    fi
    affine_runparams_copy="$output/affine/elastixParams_affine.txt"
    if [ -e "$affine_runparams_copy" -a ! -w "$affine_runparams_copy" ]; then
        if "$say_no"; then
            >&2 echo "WARNING: Parameter file already present ($affine_runparams_copy) but not overwritable. Skipping."
            return 1
        fi
        if "$say_yes"; then
            chmod +w $affine_runparams_copy
        else
            >&2 read -p "WARNING: Parameter file already present ($affine_runparams_copy) but not overwritable. Are you sure you want to overwrite it? (y/n) " input
            case $input in [yY]) echo "Overwriting"; chmod +w "$affine_runparams_copy" ;; *) echo "Exiting"; return 1 ;; esac
        fi
    fi
    cp "$affine_runparams" "$affine_runparams_copy"
    if $suppress_image_writing; then
        sed "${dashi[@]}" 's/(WriteResultImage "true")/(WriteResultImage "false")/' "$affine_runparams_copy"
    fi
    if [ -n "$points" -a -n "$target_points" ]; then
        sed "${dashi[@]}" 's/(Metric "AdvancedNormalizedCorrelation")/(Metric "AdvancedNormalizedCorrelation" "CorrespondingPointsEuclideanDistanceMetric")\r\n(Metric0Weight 1)\r\n(Metric1Weight 0.01)/' "$affine_runparams_copy"
        sed "${dashi[@]}" 's/\/\/(Metric1Use/(Metric1Use/' "$affine_runparams_copy"
        cp "$points" "$target_points" "$output/affine/"
    fi
    $chmod -w "$affine_runparams_copy"

    echo "AFFINE"
    $elastix -f $fixed \
        -m $moving \
        $mask_argument \
        $target_mask_argument \
        $points_argument \
        -out $output/affine \
        -threads $n_threads \
        -p "$affine_runparams_copy" \
        $affine_initial_transform
    echo
}

func_run_Bspline() {
    if [ ! -f "$bspline_runparams" ]; then
        show_help
        >&2 echo "ERROR: elastix parameter file does not exist at $bspline_runparams"
        return 1
    fi

    if [ -z "$bspline_initial_transform" ]; then
        bspline_initial_transform="$affine_transformation_parameters"
    fi
    if ! $fake && [ ! -e "$bspline_initial_transform" ]; then
        show_help
        >&2 echo "ERROR: To run Bspline alignment, either affine transformation parameters must exist at $affine_transformation_parameters or you must provide a Bspline initial transform with the -bt0 argument."
        $return 1
    fi

    mkdir -p "$output/Bspline"
    for spacing in $spacings; do
        for bending_weight in $bending_weights; do
            this_run_output="$output/Bspline/${spacing}spacing_${bending_weight}bendingweight${output_suffix}"
            mkdir -p $this_run_output

            #Make new parameter file with requested spacing and bending_weigh
            bspline_runparams_copy="$this_run_output/elastixParams_Bspline.txt"
            if [ -e "$bspline_runparams_copy" -a ! -w "$bspline_runparams_copy" ]; then
                if "$say_no"; then
                    >&2 echo "WARNING: Parameter file already present ($bspline_runparams_copy) but not overwritable. Skipping."
                    return 1
                fi
                if "$say_yes"; then
                    chmod +w "$bspline_runparams_copy"
                else
                    >&2 read -p "WARNING: Parameter file already present ($bspline_runparams_copy) but not overwritable. Are you sure you want to overwrite it? (y/n) " input
                    case $input in [yY]) echo "Overwriting"; chmod +w "$bspline_runparams_copy" ;; *) echo "Exiting"; return 1 ;; esac
                fi
            fi
            cp "$bspline_runparams" "$bspline_runparams_copy"
            sed "${dashi[@]}" "s/(FinalGridSpacingInPhysicalUnits _GRIDSPACING_)/(FinalGridSpacingInPhysicalUnits ${spacing//-/ })/" "$bspline_runparams_copy"
            if $suppress_image_writing; then
                sed "${dashi[@]}" 's/(WriteResultImage "true")/(WriteResultImage "false")/' "$bspline_runparams_copy"
            fi
            if [ -n "$points" -a -n "$target_points" ]; then
                sed "${dashi[@]}" 's/(Metric "AdvancedNormalizedCorrelation" "TransformBendingEnergyPenalty")/(Metric "AdvancedNormalizedCorrelation" "TransformBendingEnergyPenalty" "CorrespondingPointsEuclideanDistanceMetric")/' "$bspline_runparams_copy"
                sed "${dashi[@]}" 's/\/\/(Metric2Weight/(Metric2Weight/' "$bspline_runparams_copy"
                sed "${dashi[@]}" 's/\/\/(Metric2Use/(Metric2Use/' "$bspline_runparams_copy"
                cp "$points" "$target_points" "$this_run_output/"
            fi
            sed "${dashi[@]}" "s/(Metric1Weight _METRIC1WEIGHT_)/(Metric1Weight $bending_weight)/" "$bspline_runparams_copy"
            $chmod -w "$bspline_runparams_copy"

            echo "elastix with BSPLINE TRANSFORM saving to $this_run_output"
            $elastix -f "$fixed" \
                -m "$moving" \
                $mask_argument \
                $target_mask_argument \
                $points_argument \
                -out $this_run_output \
                -t0 "$bspline_initial_transform" \
                -threads $n_threads \
                -p "$bspline_runparams_copy"

            $ln -s ${spacing}spacing_${bending_weight}bendingweight${output_suffix}/result.0.nrrd $output/Bspline/result.${spacing}spacing_${bending_weight}bendingweight${output_suffix}.nrrd 2> /dev/null
            echo
        done
    done
}


if $run_affine; then
    func_run_affine
fi

if [ -e "$output/affine/TransformParameters.0.txt" ]; then
    affine_transformation_parameters=$(realpath "$output/affine/TransformParameters.0.txt")
else
    affine_transformation_parameters="$output/affine/TransformParameters.0.txt"
fi

if $run_Bspline; then
    func_run_Bspline
fi
